#+TITLE: Trivial-String-Template
#+AUTHOR: David Gu
#+DATE: <2016-04-11 Mon>
#+EMAIL: macdavid313@gmail.com

#+begin_html
<a href="https://travis-ci.org/macdavid313/trivial-string-template"><img src="https://travis-ci.org/macdavid313/trivial-string-template.svg?branch=master" alt="Travis-CI Status" /></a>
<a href="https://coveralls.io/github/macdavid313/trivial-string-template?branch=master"><img src="https://coveralls.io/repos/github/macdavid313/trivial-string-template/badge.svg?branch=master" alt="Coverage Status" /></a>
<a href="http://quickdocs.org/trivial-string-template"><img src="http://quickdocs.org/badge/trivial-string-template.svg" /></a>
#+end_html

A trivial string template library, inspired by Python's string.Template; you can check around the Python's functionality [[https://docs.python.org/2/library/string.html?highlight=string.template#string.Template][here]].

* Usage

** substitute

#+begin_src lisp
(substitute "$who likes $what" :who "tim" :what "kung pao")
;; => "tim likes kung pao"
#+end_src

You can specify the `delimiter` character by lexcially binding the special variable `\*delimiter\*`:

#+begin_src lisp
(let ((*delimiter* #\%))
  (substitute "%who likes %what" :who "tim" :what "kung pao"))
;; => "tim likes kung pao"
#+end_src

You can escape a `delimiter` character:

#+begin_src lisp
(substitute "Give $who $$100" :who "tim")
;; => "Give tim $100"
#+end_src

And you can use '{}' to set a so called `placeholder`:

#+begin_src lisp
(substitute "$who likes ${what}--is it for real?" :who "tim" :what "kung pao")
;; => "tim likes kung pao--is it for real?"
#+end_src

** safe-substitute

#+begin_src lisp
(safe-substitute "$who likes $what" :what "kung pao")
;; => "$who likes kung pao"
#+end_src

** template

It will produce a template class, which is funcallable. Some accessors methods are exported, by which you can modify the state of a template and don't you worry about any confilcts because every accessor will automatically adjust and then make itself consistent.

#+begin_src lisp
(defvar *tmpl* (template "$who likes $what"))
(funcall *tmpl* :who "a" :what "b")
;; => "a likes b"
(setf (source-string *tmpl*) "Give $who $$100")
(funcall *tmpl* :who "me")
;; => "Give me $100"
#+end_src

** define-template

Just a wrapper around template class.

#+begin_src lisp
(define-template tmpl (:delimiter #\& :safe t) "&who likes &what")
;; => #<TRIVIAL-STRING-TEMPLATE:TEMPLATE {1003B1FC7B}>
(tmpl :who tim) ;; => "tim likes &what"
#+end_src

* TODO TO DO List [66%]
  - [X] Provide a more detailed APIs documenatation.
  - [X] More tests.
  - [ ] Improvements.

* Author

- David Gu (macdavid313@gmail.com)

* License

Licensed under the MIT License.
